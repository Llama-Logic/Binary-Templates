//--------------------------------------
// The Sims 4
// Copyright 2016 Electronic Arts Inc. All rights reserved.
//
//--- 010 Editor v7.0.2 Binary Template
// Resource Type: Binary template for World Map resource (type 0x1cc04273) Version 2
//--------------------------------------

//
// ResourceKey
//
typedef struct
{
    UINT64 instance <format=hex>;
    UINT32 type <format=hex>;
    UINT32 group <format=hex>;
} ResourceKey <read=ReadResourceKey>;

string ReadResourceKey(ResourceKey& key)
{
    string s;
    SPrintf(s, "%08x:%08x:%016Lx", key.type, key.group, key.instance);
    return s;
}

//
//  Context Data
//
typedef struct
{
    UINT32 position <format=hex>;
    UINT32 length;
} ObjectData;

typedef struct
{
    UINT32 mContextversion;

    if(mContextversion != 3)
    {
        Warning("Context data version 3 expected.");
        return -1;
    }

    UINT32 mPublicKeyCount;
    UINT32 mExternalKeyCount;
    UINT32 mDelayLoadKeyCount;
    UINT32 mObjectCount;
    
    if(mPublicKeyCount > 0)
    {
        ResourceKey mPublicObject[mPublicKeyCount];
    }
    if(mObjectCount-mPublicKeyCount > 0)
    {
        ResourceKey mPrivateObject[mObjectCount-mPublicKeyCount];
    }
    if(mExternalKeyCount > 0)
    {
        ResourceKey mExternalReferences[mExternalKeyCount];
    }
    if(mDelayLoadKeyCount > 0)
    {
        ResourceKey mDelayLoadReferences[mDelayLoadKeyCount];
    }
    if(mObjectCount > 0)
    {
        ObjectData mObjectData[mObjectCount];
    }
} ContextData;

ContextData mContextData;

//
//
//

typedef struct
{
    float x,y,z;
} Vector3;

typedef struct
{
    float x,y;
} Vector2;

char sig[4];
if(sig != "WMAP" )
{
    Warning("Invalid Signature. %s", sig);
    return -1;
}

uint32 version;
if(version != 2)
{
    Warning("Unknown version of detected.");
    return -1;
}


float   FOV;
float   aspectRatio;
Vector3 cameraPosition;
Vector3 cameraDirection;


typedef struct
{
    Vector3 position;
    float   rotY;
    Vector2 size;
    uint32  worldId <format=hex>; // Hash of the world name
    uint32  lotId;

} LotInfo <read=ReadLotInfo>;

string ReadLotInfo(LotInfo& lotInfo)
{
    string s;
    SPrintf(s, "[ID %-16u][World 0x%08x]", lotInfo.lotId, lotInfo.worldId);
    return s;
}


uint32  lotCount;
if (lotCount>0)
{
    LotInfo lots[lotCount];
}