//--------------------------------------
// The Sims 4
// Copyright 2016 Electronic Arts Inc. All rights reserved.
//
//--- 010 Editor v6.0.2 Binary Template
// Resource Type: Blend Geometry Resource (0x067caa11) Version 0x600
//--------------------------------------

//
// Context Info
//
// Context info serves the following purposes:
//  * Allows multiple resources to be bundled together.
//  * Defines what resources are in the bundle (Public Keys)
//  * Defines what external resources are referenced by the bundle, 
//    and should be loaded before this resource (External Key)
//  * Defines what external resources are referenced by the bundle, 
//    but do not need to be loaded to initialize the bundle (DelayLoad Key)
//
typedef struct
{
    UINT64 instance <format=hex>;
    UINT32 type <format=hex>;
    UINT32 group <format=hex>;
} ResourceKeyInstanceFirst;

//  Loader context Data
typedef struct
{
    UINT32 position <format=hex>;
    UINT32 length;
} ObjectData;

typedef struct
{
    UINT32 mContextversion;
    UINT32 mPublicKeyCount;
    UINT32 mExternalKeyCount;
    UINT32 mDelayLoadKeyCount;
    UINT32 mObjectCount;
    
    if(mPublicKeyCount > 0)
    {
        ResourceKeyInstanceFirst mPublicObject[mPublicKeyCount];
    }
    if(mObjectCount-mPublicKeyCount > 0)
    {
        ResourceKeyInstanceFirst mPrivateObject[mObjectCount-mPublicKeyCount];
    }
    if(mExternalKeyCount > 0)
    {
        ResourceKeyInstanceFirst mExternalReferences[mExternalKeyCount];
    }
    if(mDelayLoadKeyCount > 0)
    {
        ResourceKeyInstanceFirst mDelayLoadReferences[mDelayLoadKeyCount];
    }
    if(mObjectCount > 0)
    {
        ObjectData mObjectData[mObjectCount];
    }
} ContextData;

ContextData mContextData;

//
//  Blend Geometry Data
//
CHAR signature[4];
if(signature != "BGEO" )
{
    Warning("Invlaid Signature.");
    return -1;
}

UINT32 version <format=hex>;
if(version != 0x600)  // Base Game shipped with Version 0x600
{
    Warning("Unknown version detected.");
    return -1;
}

UINT32 lodCount;
if(lodCount != 4)
{
    Warning("LOD count mismatch.");
    return -1;
}

UINT32 totalVertexCount;
UINT32 totalVectorCount;

typedef struct
{
    UINT32 indexBase;
    UINT32 numVerts;
    UINT32 numDeltaVectors;
} LOD;

LOD LODData[lodCount];


// Blend map flags
enum
{
    // Apply a position delta to this vertex.
    kFlagPosDelta = 1,
    // Apply a normal delta to this vertex. It follows the position delta if both
    // are present.
    kFlagNorDelta = 2,
    kFlagAll      = 3,
    kPackIndexScale = 4,  
    kPackIndexShift = 2,
};

// The blend map is an array of totalVertexCount size where each entry consists
// of a offset in to the LOD's VectorData array combined with position/normal delta
// bits, which indicate whether this vert has position and/or normal deltas 
// targeting it. The offset is in bytes, and the normal delta, if present,
// immediately follows the position delta.
UINT16 blendMap[totalVertexCount];

typedef struct
{
    UINT16 vector[3] <format=hex>;
} Vector;
Vector VectorData[totalVectorCount];

//
// Example code to illustrate blendmap decompression and indexing
//
local uint32 i;
local uint16 flags;
local uint16 decompresseddata;
local uint16 unpackedindex;
local uint16 largestunpackedindex=0;
local uint32 deltabase = 0;
for (i = 0 ; i < totalVertexCount ; i++)
{   
    decompresseddata = blendMap[i];
    flags = decompresseddata & kFlagAll;
    if (flags!=0)
    {
        deltabase +=  decompresseddata - flags;
        decompresseddata = deltabase + flags;
    }
    unpackedindex = (decompresseddata & ~kFlagAll) >> kPackIndexShift;
    if ( unpackedindex > largestunpackedindex )
        largestunpackedindex = unpackedindex;
    Printf("Blendmap [index:%d][flags:0x%x][decompressed:%d][unpackedindex:%d]\n", i, flags, decompresseddata, unpackedindex);
}
Printf("largestunpackedindex = %d", largestunpackedindex);  // Sanity check that the #s look correct
